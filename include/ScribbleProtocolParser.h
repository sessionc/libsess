/** \file
 *  This C header file was generated by $ANTLR version 3.2 debian-5
 *
 *     -  From the grammar source file : ScribbleProtocol.g
 *     -                            On : 2011-09-06 14:24:22
 *     -                for the parser : ScribbleProtocolParserParser *
 * Editing it, at least manually, is not wise. 
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The parser ScribbleProtocolParser has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 * 
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pScribbleProtocolParser, which is returned from a call to ScribbleProtocolParserNew().
 *
 * The methods in pScribbleProtocolParser are  as follows:
 *
 *  - ScribbleProtocolParser_description_return      pScribbleProtocolParser->description(pScribbleProtocolParser)
 *  - ScribbleProtocolParser_importProtocolStatement_return      pScribbleProtocolParser->importProtocolStatement(pScribbleProtocolParser)
 *  - ScribbleProtocolParser_importProtocolDef_return      pScribbleProtocolParser->importProtocolDef(pScribbleProtocolParser)
 *  - ScribbleProtocolParser_importTypeStatement_return      pScribbleProtocolParser->importTypeStatement(pScribbleProtocolParser)
 *  - ScribbleProtocolParser_importTypeDef_return      pScribbleProtocolParser->importTypeDef(pScribbleProtocolParser)
 *  - ScribbleProtocolParser_dataTypeDef_return      pScribbleProtocolParser->dataTypeDef(pScribbleProtocolParser)
 *  - ScribbleProtocolParser_simpleName_return      pScribbleProtocolParser->simpleName(pScribbleProtocolParser)
 *  - ScribbleProtocolParser_protocolDef_return      pScribbleProtocolParser->protocolDef(pScribbleProtocolParser)
 *  - ScribbleProtocolParser_protocolName_return      pScribbleProtocolParser->protocolName(pScribbleProtocolParser)
 *  - ScribbleProtocolParser_parameterDefs_return      pScribbleProtocolParser->parameterDefs(pScribbleProtocolParser)
 *  - ScribbleProtocolParser_parameterDef_return      pScribbleProtocolParser->parameterDef(pScribbleProtocolParser)
 *  - ScribbleProtocolParser_blockDef_return      pScribbleProtocolParser->blockDef(pScribbleProtocolParser)
 *  - ScribbleProtocolParser_activityListDef_return      pScribbleProtocolParser->activityListDef(pScribbleProtocolParser)
 *  - ScribbleProtocolParser_activityDef_return      pScribbleProtocolParser->activityDef(pScribbleProtocolParser)
 *  - ScribbleProtocolParser_introducesDef_return      pScribbleProtocolParser->introducesDef(pScribbleProtocolParser)
 *  - ScribbleProtocolParser_roleDef_return      pScribbleProtocolParser->roleDef(pScribbleProtocolParser)
 *  - ScribbleProtocolParser_roleName_return      pScribbleProtocolParser->roleName(pScribbleProtocolParser)
 *  - ScribbleProtocolParser_typeReferenceDef_return      pScribbleProtocolParser->typeReferenceDef(pScribbleProtocolParser)
 *  - ScribbleProtocolParser_interactionSignatureDef_return      pScribbleProtocolParser->interactionSignatureDef(pScribbleProtocolParser)
 *  - ScribbleProtocolParser_interactionDef_return      pScribbleProtocolParser->interactionDef(pScribbleProtocolParser)
 *  - ScribbleProtocolParser_choiceDef_return      pScribbleProtocolParser->choiceDef(pScribbleProtocolParser)
 *  - ScribbleProtocolParser_directedChoiceDef_return      pScribbleProtocolParser->directedChoiceDef(pScribbleProtocolParser)
 *  - ScribbleProtocolParser_onMessageDef_return      pScribbleProtocolParser->onMessageDef(pScribbleProtocolParser)
 *  - ScribbleProtocolParser_activityList_return      pScribbleProtocolParser->activityList(pScribbleProtocolParser)
 *  - ScribbleProtocolParser_repeatDef_return      pScribbleProtocolParser->repeatDef(pScribbleProtocolParser)
 *  - ScribbleProtocolParser_recBlockDef_return      pScribbleProtocolParser->recBlockDef(pScribbleProtocolParser)
 *  - ScribbleProtocolParser_labelName_return      pScribbleProtocolParser->labelName(pScribbleProtocolParser)
 *  - ScribbleProtocolParser_recursionDef_return      pScribbleProtocolParser->recursionDef(pScribbleProtocolParser)
 *  - ScribbleProtocolParser_endDef_return      pScribbleProtocolParser->endDef(pScribbleProtocolParser)
 *  - ScribbleProtocolParser_runDef_return      pScribbleProtocolParser->runDef(pScribbleProtocolParser)
 *  - ScribbleProtocolParser_protocolRefDef_return      pScribbleProtocolParser->protocolRefDef(pScribbleProtocolParser)
 *  - ScribbleProtocolParser_declarationName_return      pScribbleProtocolParser->declarationName(pScribbleProtocolParser)
 *  - ScribbleProtocolParser_parameter_return      pScribbleProtocolParser->parameter(pScribbleProtocolParser)
 *  - ScribbleProtocolParser_includeDef_return      pScribbleProtocolParser->includeDef(pScribbleProtocolParser)
 *  - ScribbleProtocolParser_parallelDef_return      pScribbleProtocolParser->parallelDef(pScribbleProtocolParser)
 *  - ScribbleProtocolParser_globalEscapeDef_return      pScribbleProtocolParser->globalEscapeDef(pScribbleProtocolParser)
 *  - ScribbleProtocolParser_interruptDef_return      pScribbleProtocolParser->interruptDef(pScribbleProtocolParser)
 *  - ScribbleProtocolParser_unorderedDef_return      pScribbleProtocolParser->unorderedDef(pScribbleProtocolParser)
 *  - ScribbleProtocolParser_expr_return      pScribbleProtocolParser->expr(pScribbleProtocolParser)
 *  - ScribbleProtocolParser_term_return      pScribbleProtocolParser->term(pScribbleProtocolParser)
 *  - ScribbleProtocolParser_factor_return      pScribbleProtocolParser->factor(pScribbleProtocolParser)
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD licence"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_ScribbleProtocolParser_H
#define _ScribbleProtocolParser_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */
 
#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct ScribbleProtocolParser_Ctx_struct ScribbleProtocolParser, * pScribbleProtocolParser;



#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule 
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif
typedef struct ScribbleProtocolParser_description_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ScribbleProtocolParser_description_return;

typedef struct ScribbleProtocolParser_importProtocolStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ScribbleProtocolParser_importProtocolStatement_return;

typedef struct ScribbleProtocolParser_importProtocolDef_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ScribbleProtocolParser_importProtocolDef_return;

typedef struct ScribbleProtocolParser_importTypeStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ScribbleProtocolParser_importTypeStatement_return;

typedef struct ScribbleProtocolParser_importTypeDef_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ScribbleProtocolParser_importTypeDef_return;

typedef struct ScribbleProtocolParser_dataTypeDef_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ScribbleProtocolParser_dataTypeDef_return;

typedef struct ScribbleProtocolParser_simpleName_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ScribbleProtocolParser_simpleName_return;

typedef struct ScribbleProtocolParser_protocolDef_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ScribbleProtocolParser_protocolDef_return;

typedef struct ScribbleProtocolParser_protocolName_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ScribbleProtocolParser_protocolName_return;

typedef struct ScribbleProtocolParser_parameterDefs_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ScribbleProtocolParser_parameterDefs_return;

typedef struct ScribbleProtocolParser_parameterDef_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ScribbleProtocolParser_parameterDef_return;

typedef struct ScribbleProtocolParser_blockDef_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ScribbleProtocolParser_blockDef_return;

typedef struct ScribbleProtocolParser_activityListDef_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ScribbleProtocolParser_activityListDef_return;

typedef struct ScribbleProtocolParser_activityDef_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ScribbleProtocolParser_activityDef_return;

typedef struct ScribbleProtocolParser_introducesDef_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ScribbleProtocolParser_introducesDef_return;

typedef struct ScribbleProtocolParser_roleDef_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ScribbleProtocolParser_roleDef_return;

typedef struct ScribbleProtocolParser_roleName_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ScribbleProtocolParser_roleName_return;

typedef struct ScribbleProtocolParser_typeReferenceDef_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ScribbleProtocolParser_typeReferenceDef_return;

typedef struct ScribbleProtocolParser_interactionSignatureDef_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ScribbleProtocolParser_interactionSignatureDef_return;

typedef struct ScribbleProtocolParser_interactionDef_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ScribbleProtocolParser_interactionDef_return;

typedef struct ScribbleProtocolParser_choiceDef_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ScribbleProtocolParser_choiceDef_return;

typedef struct ScribbleProtocolParser_directedChoiceDef_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ScribbleProtocolParser_directedChoiceDef_return;

typedef struct ScribbleProtocolParser_onMessageDef_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ScribbleProtocolParser_onMessageDef_return;

typedef struct ScribbleProtocolParser_activityList_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ScribbleProtocolParser_activityList_return;

typedef struct ScribbleProtocolParser_repeatDef_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ScribbleProtocolParser_repeatDef_return;

typedef struct ScribbleProtocolParser_recBlockDef_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ScribbleProtocolParser_recBlockDef_return;

typedef struct ScribbleProtocolParser_labelName_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ScribbleProtocolParser_labelName_return;

typedef struct ScribbleProtocolParser_recursionDef_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ScribbleProtocolParser_recursionDef_return;

typedef struct ScribbleProtocolParser_endDef_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ScribbleProtocolParser_endDef_return;

typedef struct ScribbleProtocolParser_runDef_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ScribbleProtocolParser_runDef_return;

typedef struct ScribbleProtocolParser_protocolRefDef_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ScribbleProtocolParser_protocolRefDef_return;

typedef struct ScribbleProtocolParser_declarationName_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ScribbleProtocolParser_declarationName_return;

typedef struct ScribbleProtocolParser_parameter_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ScribbleProtocolParser_parameter_return;

typedef struct ScribbleProtocolParser_includeDef_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ScribbleProtocolParser_includeDef_return;

typedef struct ScribbleProtocolParser_parallelDef_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ScribbleProtocolParser_parallelDef_return;

typedef struct ScribbleProtocolParser_globalEscapeDef_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ScribbleProtocolParser_globalEscapeDef_return;

typedef struct ScribbleProtocolParser_interruptDef_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ScribbleProtocolParser_interruptDef_return;

typedef struct ScribbleProtocolParser_unorderedDef_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ScribbleProtocolParser_unorderedDef_return;

typedef struct ScribbleProtocolParser_expr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ScribbleProtocolParser_expr_return;

typedef struct ScribbleProtocolParser_term_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ScribbleProtocolParser_term_return;

typedef struct ScribbleProtocolParser_factor_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ScribbleProtocolParser_factor_return;



/** Context tracking structure for ScribbleProtocolParser
 */
struct ScribbleProtocolParser_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_PARSER   pParser;


     ScribbleProtocolParser_description_return (*description)	(struct ScribbleProtocolParser_Ctx_struct * ctx);
     ScribbleProtocolParser_importProtocolStatement_return (*importProtocolStatement)	(struct ScribbleProtocolParser_Ctx_struct * ctx);
     ScribbleProtocolParser_importProtocolDef_return (*importProtocolDef)	(struct ScribbleProtocolParser_Ctx_struct * ctx);
     ScribbleProtocolParser_importTypeStatement_return (*importTypeStatement)	(struct ScribbleProtocolParser_Ctx_struct * ctx);
     ScribbleProtocolParser_importTypeDef_return (*importTypeDef)	(struct ScribbleProtocolParser_Ctx_struct * ctx);
     ScribbleProtocolParser_dataTypeDef_return (*dataTypeDef)	(struct ScribbleProtocolParser_Ctx_struct * ctx);
     ScribbleProtocolParser_simpleName_return (*simpleName)	(struct ScribbleProtocolParser_Ctx_struct * ctx);
     ScribbleProtocolParser_protocolDef_return (*protocolDef)	(struct ScribbleProtocolParser_Ctx_struct * ctx);
     ScribbleProtocolParser_protocolName_return (*protocolName)	(struct ScribbleProtocolParser_Ctx_struct * ctx);
     ScribbleProtocolParser_parameterDefs_return (*parameterDefs)	(struct ScribbleProtocolParser_Ctx_struct * ctx);
     ScribbleProtocolParser_parameterDef_return (*parameterDef)	(struct ScribbleProtocolParser_Ctx_struct * ctx);
     ScribbleProtocolParser_blockDef_return (*blockDef)	(struct ScribbleProtocolParser_Ctx_struct * ctx);
     ScribbleProtocolParser_activityListDef_return (*activityListDef)	(struct ScribbleProtocolParser_Ctx_struct * ctx);
     ScribbleProtocolParser_activityDef_return (*activityDef)	(struct ScribbleProtocolParser_Ctx_struct * ctx);
     ScribbleProtocolParser_introducesDef_return (*introducesDef)	(struct ScribbleProtocolParser_Ctx_struct * ctx);
     ScribbleProtocolParser_roleDef_return (*roleDef)	(struct ScribbleProtocolParser_Ctx_struct * ctx);
     ScribbleProtocolParser_roleName_return (*roleName)	(struct ScribbleProtocolParser_Ctx_struct * ctx);
     ScribbleProtocolParser_typeReferenceDef_return (*typeReferenceDef)	(struct ScribbleProtocolParser_Ctx_struct * ctx);
     ScribbleProtocolParser_interactionSignatureDef_return (*interactionSignatureDef)	(struct ScribbleProtocolParser_Ctx_struct * ctx);
     ScribbleProtocolParser_interactionDef_return (*interactionDef)	(struct ScribbleProtocolParser_Ctx_struct * ctx);
     ScribbleProtocolParser_choiceDef_return (*choiceDef)	(struct ScribbleProtocolParser_Ctx_struct * ctx);
     ScribbleProtocolParser_directedChoiceDef_return (*directedChoiceDef)	(struct ScribbleProtocolParser_Ctx_struct * ctx);
     ScribbleProtocolParser_onMessageDef_return (*onMessageDef)	(struct ScribbleProtocolParser_Ctx_struct * ctx);
     ScribbleProtocolParser_activityList_return (*activityList)	(struct ScribbleProtocolParser_Ctx_struct * ctx);
     ScribbleProtocolParser_repeatDef_return (*repeatDef)	(struct ScribbleProtocolParser_Ctx_struct * ctx);
     ScribbleProtocolParser_recBlockDef_return (*recBlockDef)	(struct ScribbleProtocolParser_Ctx_struct * ctx);
     ScribbleProtocolParser_labelName_return (*labelName)	(struct ScribbleProtocolParser_Ctx_struct * ctx);
     ScribbleProtocolParser_recursionDef_return (*recursionDef)	(struct ScribbleProtocolParser_Ctx_struct * ctx);
     ScribbleProtocolParser_endDef_return (*endDef)	(struct ScribbleProtocolParser_Ctx_struct * ctx);
     ScribbleProtocolParser_runDef_return (*runDef)	(struct ScribbleProtocolParser_Ctx_struct * ctx);
     ScribbleProtocolParser_protocolRefDef_return (*protocolRefDef)	(struct ScribbleProtocolParser_Ctx_struct * ctx);
     ScribbleProtocolParser_declarationName_return (*declarationName)	(struct ScribbleProtocolParser_Ctx_struct * ctx);
     ScribbleProtocolParser_parameter_return (*parameter)	(struct ScribbleProtocolParser_Ctx_struct * ctx);
     ScribbleProtocolParser_includeDef_return (*includeDef)	(struct ScribbleProtocolParser_Ctx_struct * ctx);
     ScribbleProtocolParser_parallelDef_return (*parallelDef)	(struct ScribbleProtocolParser_Ctx_struct * ctx);
     ScribbleProtocolParser_globalEscapeDef_return (*globalEscapeDef)	(struct ScribbleProtocolParser_Ctx_struct * ctx);
     ScribbleProtocolParser_interruptDef_return (*interruptDef)	(struct ScribbleProtocolParser_Ctx_struct * ctx);
     ScribbleProtocolParser_unorderedDef_return (*unorderedDef)	(struct ScribbleProtocolParser_Ctx_struct * ctx);
     ScribbleProtocolParser_expr_return (*expr)	(struct ScribbleProtocolParser_Ctx_struct * ctx);
     ScribbleProtocolParser_term_return (*term)	(struct ScribbleProtocolParser_Ctx_struct * ctx);
     ScribbleProtocolParser_factor_return (*factor)	(struct ScribbleProtocolParser_Ctx_struct * ctx);
    // Delegated rules
    const char * (*getGrammarFileName)();
    void	    (*free)   (struct ScribbleProtocolParser_Ctx_struct * ctx);
    /* @headerFile.members() */
    pANTLR3_BASE_TREE_ADAPTOR	adaptor;
    pANTLR3_VECTOR_FACTORY		vectors;
    /* End @headerFile.members() */
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API pScribbleProtocolParser ScribbleProtocolParserNew         (pANTLR3_COMMON_TOKEN_STREAM instream);
ANTLR3_API pScribbleProtocolParser ScribbleProtocolParserNewSSD      (pANTLR3_COMMON_TOKEN_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the parser will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif 
#define T__29      29
#define T__28      28
#define T__27      27
#define T__26      26
#define T__25      25
#define T__24      24
#define T__23      23
#define T__22      22
#define ANNOTATION      13
#define T__21      21
#define ID      14
#define EOF      -1
#define RECV      11
#define ML_COMMENT      19
#define INTERACTION      4
#define FULLSTOP      9
#define PLUS      5
#define SEND      12
#define DIGIT      17
#define T__42      42
#define T__43      43
#define T__40      40
#define T__41      41
#define T__46      46
#define T__44      44
#define T__45      45
#define LINE_COMMENT      20
#define NUMBER      16
#define WHITESPACE      18
#define MINUS      6
#define MULT      7
#define StringLiteral      15
#define T__30      30
#define T__31      31
#define T__32      32
#define T__33      33
#define T__34      34
#define T__35      35
#define T__36      36
#define T__37      37
#define T__38      38
#define T__39      39
#define BRANCH      10
#define DIV      8
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for ScribbleProtocolParser
 * =============================================================================
 */
/** \} */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
